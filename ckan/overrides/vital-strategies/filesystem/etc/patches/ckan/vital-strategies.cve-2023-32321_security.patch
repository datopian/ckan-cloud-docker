diff --git a/ckan/lib/uploader.py b/ckan/lib/uploader.py
index f83817c4c..59add955b 100644
--- a/ckan/lib/uploader.py
+++ b/ckan/lib/uploader.py
@@ -238,13 +238,19 @@ class ResourceUpload(object):
             resource['url_type'] = ''
 
     def get_directory(self, id):
-        directory = os.path.join(self.storage_path,
-                                 id[0:3], id[3:6])
+        real_storage = os.path.realpath(self.storage_path)
+        directory = os.path.join(real_storage, id[0:3], id[3:6])
+        if directory != os.path.realpath(directory):
+            raise logic.ValidationError({'upload': ['Invalid storage directory']})
         return directory
-
+
     def get_path(self, id):
         directory = self.get_directory(id)
         filepath = os.path.join(directory, id[6:])
+
+        if filepath != os.path.realpath(filepath):
+            raise logic.ValidationError({'upload': ['Invalid storage path']})
+
         return filepath
 
     def upload(self, id, max_size=10):
diff --git a/ckan/logic/schema.py b/ckan/logic/schema.py
index fe8e05c38..f33ba8976 100644
--- a/ckan/logic/schema.py
+++ b/ckan/logic/schema.py
@@ -70,13 +70,15 @@ from ckan.logic.validators import (
     extra_key_not_in_root_schema,
     empty_if_not_sysadmin,
     package_id_does_not_exist,
-    email_validator
+    email_validator,
+    resource_id_validator,
+    resource_id_does_not_exist
     )
 
 
 def default_resource_schema():
     schema = {
-        'id': [ignore_empty, unicode],
+        'id': [ignore_empty, resource_id_validator, resource_id_does_not_exist, unicode],
         'revision_id': [ignore_missing, unicode],
         'package_id': [ignore],
         'url': [ignore_missing, unicode, remove_whitespace],
diff --git a/ckan/logic/validators.py b/ckan/logic/validators.py
index 57c2b267e..ad4274c17 100644
--- a/ckan/logic/validators.py
+++ b/ckan/logic/validators.py
@@ -5,6 +5,7 @@ import datetime
 from itertools import count
 import re
 import mimetypes
+from sqlalchemy.orm.exc import NoResultFound
 
 import ckan.lib.navl.dictization_functions as df
 import ckan.logic as logic
@@ -193,6 +194,26 @@ def package_id_or_name_exists(package_id_or_name, context):
     return package_id_or_name
 
 
+def resource_id_does_not_exist(key, data, errors, context):
+    session = context['session']
+    model = context['model']
+
+    if data[key] is missing:
+        return
+    resource_id = data[key]
+    assert key[0] == 'resources', ('validator depends on resource schema '
+                                   'validating as part of package schema')
+    package_id = data.get(('id',))
+    query = session.query(model.Resource.package_id).filter(
+        model.Resource.id == resource_id,
+    )
+    try:
+        [parent_id] = query.one()
+    except NoResultFound:
+        return
+    if parent_id != package_id:
+        errors[key].append(_('Resource id already exists.'))
+
 def resource_id_exists(value, context):
     model = context['model']
     session = context['session']
@@ -200,6 +221,13 @@ def resource_id_exists(value, context):
         raise Invalid('%s: %s' % (_('Not found'), _('Resource')))
     return value
 
+def resource_id_validator(value):
+    pattern = re.compile("[^0-9a-zA-Z _-]")
+    if pattern.search(value):
+        raise Invalid(_('Invalid characters in resource id'))
+    if len(value) < 7 or len(value) > 100:
+        raise Invalid(_('Invalid length for resource id'))
+    return value
 
 def user_id_exists(user_id, context):
     '''Raises Invalid if the given user_id does not exist in the model given
